

/*
 在 Swift 中我们一般简单地使用 Int 来表示整数，在 iPhone 5 和以下的设备中，这个类型其实等同于 Int32，而在 64 位设备中表示的是 Int64 (这点和 Objective-C 中的 NSInteger 表现是完全一样的，事实上，在 Swift 中 NSInteger 只是一个 Int 的 typealias。这就意味着，我们在开发的时候必须考虑同样的代码在不同平台上的表现差异
 
 在存在溢出可能性的地方，第一选择当然是使用更大空间的类型来表示，比如将原来的 Int32 显式地声明为 Int64。如果 64 位整数还无法满足需求的话，我们也可以考虑使用两个 Int64 来软件实现 Int128 (据我所知现在还没有面向消费领域的 128 位的电子设备) 的行为。

 最后，如果我们想要其他编程语言那样的对溢出处理温柔一些，不是让程序崩溃，而是简单地从高位截断的话，可以使用溢出处理的运算符，在 Swift 中，我们可以使用以下这五个带有 & 的操作符，这样 Swift 就会忽略掉溢出的错误：

 溢出加法 (&+)
 溢出减法 (&-)
 溢出乘法 (&*)
 溢出除法 (&/)
 溢出求模 (&%)
 */

var max = Int.max
max = max &+ 1

// 64 位系统下
// max = -9,223,372,036,854,775,808”
