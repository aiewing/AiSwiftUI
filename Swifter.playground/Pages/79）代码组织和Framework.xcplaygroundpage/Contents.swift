

/*
 Apple 为了 iOS 平台的安全性考虑，是不允许动态链接非系统的框架的。因此在 app 开发中我们所使用的第三方框架如果是以库文件的方式提供的话，一定都是需要链接并打包进最后的二进制可执行文件中的静态库。最初级和原始的静态库是以 .a 的二进制文件加上一些 .h 的头文件进行定义的形式提供的，这样的静态库在使用时比较麻烦，我们除了将其添加到项目和配置链接外，还需要进行指明头文件位置等工作。这样造成的结果不仅是添加起来比较麻烦，而且因为头文件的路径可能在不同环境下会存在不一样的情况，而造成项目在换一个开发环境后就因为配置问题造成无法编译。有过这种经历的开发人员都知道，调配开发环境是一件非常让人讨厌和耗费时间的事情。

 而 Apple 自己的框架都是 .framework 为后缀的动态框架，是集成在操作系统中的，我们使用这些框架的时候只需要在 target 配置时进行指明就可以，非常方便。

 因为 framework 的易用性，因此很多开发者都很喜欢类似的“即拖即用，无需配置”的体验。一些框架和库的开发者为了使用体验一般会用一些第三方提供的方法来模拟地生成行为类似的框架，比如 Dropbox 或者 Facebook 的 iOS SDK 都是基于这种技术完成的。

 但是要特别指出，虽然和 Apple 的框架的后缀名一样是 .framework，使用方式也类似，但是这些第三方框架都是实实在在的静态库，每个 app 需要在编译的时候进行独立地链接。

 从 Xcode 6 开始 Apple 官方提供了单独制作类似的 framework 的方法，这种便利性可能会使代码的组织方式发生重大变化。我们现在可以在一个 app 项目中添加新的类型为 Cocoa Touch Framework 的 target，并在同一个项目中通过 import 这个 target 的 module 名字 (一般和这个 target 的名字是一样的，除非使用了一些像中杠 - 这样在 module 名中的非法字符)，来引入并进行使用。

 这类框架在运行时是嵌入在 app 的 bundle 中进行动态链接的，我们的 app 本体以及各个 extension 都可以使用。这么做的一个明显的好处是我们可以在不同 target 之间很简单地重用代码，因为我们总会有一些在 app 本身和扩展中重复的东西，这时候将它们用框架的形式组织起来会是一个很好的选择。另一方面，就算你没有计划开发扩展，尝试将一部分代码分离到框架中也是有助于我们梳理项目的架构的。比如将所有的模型层组织为一个框架，如果你在这个过程中发现有困难的话，这很可能就是你需要重新考虑和重构项目架构的信号了。

 但是这样制作的框架只能嵌入在自己的 app 中，如果我们希望将自己制作的框架提供给别人使用的话，我们可以新建一个专门生成框架的项目。接下来我们会通过一个简单的例子来告诉你应该怎么做，但是在这之前，需要先说明，使用框架项目并单独导出 framework 文件这种做法，是为 Objective-C 准备的。因为 Swift 暂时并不是稳定版本，而 Swift 的运行时也是经常改变，并且没有集成到操作系统中，所以官方并不推荐单独为 Swift 制作框架。我们虽然可以使用纯 Swift 制作可用的第三方库 (接下来你会看到要怎么做)，但是并不能保证它在所有的运行环境中都能良好工作。关于 Swift 代码的兼容性，可以参看相关章节的内容。

 在当前 Swift 中，我们使用 Swift 框架的最佳实践是将整个框架项目 (包括其中源代码) 以项目依赖的方式添加到自己的项目中，并一起进行编译使用。本节所要讲述的是制作单独的编译好的框架文件供别人使用，虽然暂时还不建议将这种方法用在实际项目之中，但是这里着重想展现的是使用 Swift 制作框架文件的可能性。

 当然你也可以使用 Objective-C 来制作框架，这样就没有这些限制了，因为本来这个特性现在暂时也只是为 Objective-C 准备的。使用 Objective-C 制作框架的过程和 Swift 大同小异，因为我们这是一本关于 Swift 的书籍，所以就只使用 Swift 来进行介绍了。






 */
